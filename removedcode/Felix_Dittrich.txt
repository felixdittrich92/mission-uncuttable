from pdf2image import convert_from_path
import os
import numpy as np
import cv2
from fnmatch import fnmatch
from PIL import Image
from pathlib import Path
from moviepy.editor import *
import shutil

def create_project_folder(new_project_path, new_project_name):
    """ 
    a function which creates a project folder in the program

    @param new_project_path: path for the new project
    @param new_project_name: name of the new project
    """

    folder = Path(new_project_path, new_project_name)

    if os.path.exists(folder):
            print("Error: folder exists select a new project name")
            return
    else:
        folder.mkdir(exist_ok=False)



def convert_pdf(file_path, filename, folder_path, folder_name):
    """
    a function that takes a path and a PDF file, converts them to JPG, and then saves the individual images
    in the project folder
    
    @param file_path: the path to the pdf
    @param filename: the name of the pdf
    @param folder_path: path to the project folder
    @param folder_name: name of the project folder

    @return: returns a list with the single pictures of the pdf
    """

    input_file = Path(file_path, filename)
    check_pdf = fnmatch(input_file, '*.pdf')
    if check_pdf == True:
        folder = Path(folder_path, folder_name)

        pages = convert_from_path(str(input_file), 250)
        files = []

        for page_number, page in enumerate(pages, start=1):
            target = folder / f"{page_number:03d}.jpg"
            page.save(str(target),  'JPEG')

        for file in os.listdir(folder):
            files.append(file)

        files.sort()
        return files
    else:
        print("the datatype must be .pdf")


def add_file_to_project(file_path, filename, folder_path, folder_name):
    """
    a function which takes a file and write it in the specific folder if the file has a usefull format
    
    @param file_path: path to the file
    @param filename: name of the file
    @param project_path: the path from the project folder
    @param project_name: the name of the folder
    """
    file_to_add = Path(file_path, filename)

    if file_to_add.suffix in ['.jpg', '.mp4', '.png']:
        folder = Path(folder_path, folder_name)
        shutil.copy(str(file_to_add), str(folder))
    else:
        print("the datatype must be .jpg or .mp4 or .png")


def delete_folder(folder_path, folder_name):
    """
    a function which delete a project folder and all files
    
    @param project_path: the path to the folder
    @param project_name: the name of the folder
    """
    folder = Path(folder_path, folder_name)
    shutil.rmtree(folder, ignore_errors=True)


def check_color(file_path, filename, y1, y2, x1, x2):
    """
    a function which checks if the place for a video is free to show it 

    @param file_path: the path to the file
    @param filename: the name of the file
    @param y1: Point(x,min) in a coordinate system for the region of interest
    @param y2: Point(x,max)
    @param x1: Point(min, y)
    @param x2: Point(max, y)

    @return: True if region of interest is completly white or gray
    """
    input_file = Path(file_path, filename)
    white = 255
    gray = 32
    img = cv2.imread(str(input_file), cv2.IMREAD_GRAYSCALE)
    roi = img[y1:y2, x1:x2]

    if np.all(roi == white) == True:
        return True
    elif np.all(roi == gray) == True:
        return True
    else:
        return False
    

def picture_in_presentation(file_path, filename, file_path_small_img, small_img, y1, y2, x1, x2):
    """
    a function which takes two images and overlay the second one above the first one if place is white

    @param file_path: the path to the presentation image
    @param filename: the name of the presentation image
    @param file_path_small_img: the path to the overlay image
    @param small_img: the name of the overlay image
    @param y1: Point(x,min) in a coordinate system for the region of interest
    @param y2: Point(x,max)
    @param x1: Point(min, y)
    @param x2: Point(max, y)

    @return: a image with a overlay or a image without a overlay

    """
    large_img = Path(file_path, filename)
    large_img = cv2.imread(str(large_img))
    height = large_img.shape[0]
    width = large_img.shape[1]

    small_img = Path(file_path_small_img, small_img)
    small_img = cv2.imread(str(small_img))
    small_img = cv2.resize(small_img, (250, 200))

    x_offset = width - 250 #only for resolution 250 
    y_offset = height - 235 #only for resolution 250 

    if check_color(file_path, filename, y1, y2, x1, x2) == True:
        large_img[y_offset:y_offset+small_img.shape[0], x_offset:x_offset+small_img.shape[1]] = small_img
        return large_img
    else:
        return large_img


def large_video(folder_path, folder_name, video_path, video_name):
    """
    a function to get the part of the speaker from the "main video" and save it in the project folder

    @param folder_path: path to the project folder
    @param folder_name: the name of the project folder
    @param video_path: the path to the video
    @param video_name: the name of the "main video"

    @return: a String to the new generated video
    """

    video_file = Path(video_path, video_name)
    folder = Path(folder_path, folder_name)

    cap = cv2.VideoCapture(str(video_file))

    large_video_name = 'large_video.mp4'
    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    out = cv2.VideoWriter(os.path.join(folder,str(large_video_name)), fourcc , 21, (938, 530))

    if(cap.isOpened() == False):
        print("Error opening video stream or file")

    while(cap.isOpened()):
        ret, frame = cap.read()
        if ret == True:
            frame = frame[275:805, 17:955]
            out.write(frame)

        else:
            break
    cap.release()
    out.release()
    cv2.destroyAllWindows()
    new_large_video_path = Path(folder, large_video_name)
    return new_large_video_path


def small_video(folder_path, folder_name, video_path, video_name):
    """
    a function to get the part of the foil/visualiser from the "main video" and save it in the project folder

    @param folder_path: path to the project folder
    @param folder_name: the name of the project folder
    @param video_path: the path to the video
    @param video_name: the name of the "main video"

    @return: a String to the new generated video
    """
    video_file = Path(video_path, video_name)
    folder = Path(folder_path, folder_name)

    cap = cv2.VideoCapture(str(video_file))

    small_video_name = 'small_video.mp4'
    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    out = cv2.VideoWriter(os.path.join(folder,str(small_video_name)), fourcc , 21, (700, 530))
    
    if(cap.isOpened() == False):
        print("Error opening video stream or file")

    while(cap.isOpened()):
        ret, frame = cap.read()
        if ret == True:
            frame = frame[275:805, 1080:1780]
            out.write(frame)

        else:
            break
    cap.release()
    out.release()
    cv2.destroyAllWindows()
    new_small_video_path = Path(folder, small_video_name)
    return new_small_video_path

#need tests
def audio_from_video(folder_path, folder_name, video_path, video_name):
    """
    a function to get the audio from a video and save it in the project folder

    @param folder_path: path to the project folder
    @param folder_name: the name of the project folder
    @param video_path: the path to the video
    @param video_name: the name of the "main video"

    @return: a String to the new generated audio
    """

    folder = Path(folder_path, folder_name)
    video = Path(video_path, video_name)

    audio_from_video = 'audio.mp3'
    video = VideoFileClip(str(video))
    audio = video.audio
    audio.write_audiofile(os.path.join(folder,str(audio_from_video)))
    extracted_audio = Path(folder, audio_from_video)
    return extracted_audio


#----------------------------------------------------------------------------------

    def check_color(self):
        """
        a method which checks if the place for a video is free to show it 

        @return: True if region of interest is completly white or gray
        """
        input_file = Path(self.file_path, self.filename)
        picture = cv2.imread(str(input_file))
        height = picture.shape[0]
        width = picture.shape[1]
        # upper y point
        y1 = int((73.8 * height) / 100)
        # lower y point
        y2 = int((94.7 * height) / 100)
        # left x point
        x1 = int((79.3 * width) / 100)
        # right x point
        x2 = int(width)
        white = 255
        gray = 32
        img = cv2.imread(str(input_file), cv2.IMREAD_GRAYSCALE)
        roi = img[y1:y2, x1:x2]

        if np.all(roi == white) == True:
            return True
        elif np.all(roi == gray) == True:
            return True
        else:
            return False

    def picture_in_presentation(self, file_path_small_img, small_img):
        """
        a method which takes two images and overlay the second one above the first one if place is white
        this method creates a object of the overlayed or non overlayed picture

        @param file_path_small_img: the path to the overlay image
        @param small_img: the name of the overlay image
        """

        large_img = Path(self.file_path, self.filename)
        large_img = cv2.imread(str(large_img))
        height = large_img.shape[0]
        width = large_img.shape[1]

        small_img = Path(file_path_small_img, small_img)
        small_img = cv2.imread(str(small_img))
        small_img = cv2.resize(small_img, (250, 200)) # little picture size (width,height)

        x_offset = width - 250 # only for resolution 250 
        bottom = ((3.7 * height) / 100) # blue bottom ground
        y_offset = int((height - 200) - bottom) # only for resolution 250 

        if self.check_color() == True: 
            large_img[y_offset:y_offset+small_img.shape[0], x_offset:x_offset+small_img.shape[1]] = small_img
            #self.files.append(Slide(large_img[y_offset:y_offset+small_img.shape[0], x_offset:x_offset+small_img.shape[1]]))
        else:
            #self.files.append(Slide(large_img))

#--------------------------------------------------------------------------------------------------------------------------------------

from .media_file import MediaFile
import openshot
import cv2

class BoardVideo(MediaFile):
    """
    This class contains the video
    """

    def __init__(self, file_path): 
        self.__file_path = file_path
        self.background = None
        self.accumulated_weight = 0.5
        self.visualiser_time = []
        self.blackboard_time = []
        self.subvideos = []

        self.roi_visualiser_top = 250
        self.roi_visualiser_bottom = 600
        self.roi_visualiser_right = 800 
        self.roi_visualiser_left = 1000

        self.roi_board_top = 260 
        self.roi_board_bottom = 140
        self.roi_board_right = 150
        self.roi_board_left = 750

    def get(self):
        return self.__file_path
    
    def calc_accum_avg(self, frame, accumulated_weight):

        self.background

        if self.background is None:
            self.background = frame.copy().astype("float")
            return None
        
        cv2.accumulateWeighted(frame, background, self.accumulated_weight)

    def segment(self, frame, threshold=50):

        self.background

        diff = cv2.absdiff(self.background.astype("uint8"),frame)

        _, thresholded = cv2.threshold(diff, threshold, 255, cv2.THRESH_BINARY)

        contours, hierarchy = cv2.findContours(thresholded.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

        if len(contours) == 0:
            return None
        
        else:
            move_segment = max(contours, key = cv2.contourArea)

            return (thresholded, move_segment)

    def visualiser_area(self): 
        video = self.__file_path
        video = cv2.VideoCapture(str(video))
        #length = int(video.get(cv2.CAP_PROP_FRAME_COUNT))
        num_frames = 0

        fgbg = cv2.createBackgroundSubtractorMOG2()

        while True:
            ret,frame = video.read()

            if frame is None:
                return

            roi_visualiser = frame[self.roi_visualiser_top:self.roi_visualiser_bottom,self.roi_visualiser_right:self.roi_visualiser_left]
            fgmask = fgbg.apply(roi_visualiser)
            gray = cv2.cvtColor(roi_visualiser, cv2.COLOR_BGR2GRAY)
            gray = cv2.GaussianBlur(gray, (9,9), 0)
            #gray = cv2.Canny(gray, 300, 550, 3)
            if num_frames < 1:
                self.calc_accum_avg(gray, self.accumulated_weight)

            else:
                visualiser = self.segment(gray)
                if visualiser is not None:  
                    thresholded, move_segment = visualiser
                    milli = video.get(cv2.CAP_PROP_POS_MSEC)
                    time = milli/1000
                    self.visualiser_time.append(time)
                elif visualiser is None:
                    if not self.visualiser_time:
                        pass
                    else:
                        number = 0
                        start = self.visualiser_time[0]
                        end = self.visualiser_time[-1]
                        full_video = VideoSplitter("/home/felix/Schreibtisch/", "Projekt", "large_video.mp4")
                        small_video = full_video.small_video()
                        clip = openshot.Clip(small_video)
                        clip.Start(start)
                        clip.End(end)
                        self.subvideos.append(clip)
                        self.visualiser_time.clear()
                        number += 1

            num_frames += 1
            #print(self.subvideos)

        video.release()
        cv2.destroyAllWindows()

    def board_area(self):
        full_video = self.__file_path
        video = cv2.VideoCapture(str(full_video))
        length = int(video.get(cv2.CAP_PROP_FRAME_COUNT))
        num_frames = 0

        fgbg = cv2.createBackgroundSubtractorMOG2()

        while True:
            ret,frame = video.read()

            if frame is None:
                return

            roi_board = frame[self.roi_board_top:self.roi_board_bottom,self.roi_board_right:self.roi_board_left]
            fgmask = fgbg.apply(roi_board)
            gray = cv2.cvtColor(roi_board, cv2.COLOR_BGR2GRAY)
            gray = cv2.GaussianBlur(gray, (9,9), 0)

            if num_frames < 1:
                self.calc_accum_avg(gray, self.accumulated_weight)

            else:
                board = self.segment(gray)
                if board is not None:  
                    thresholded, move_segment = board
                    milli = video.get(cv2.CAP_PROP_POS_MSEC)
                    time = milli/1000
                    self.board_time.append(time)
                elif board is None:
                    if not self.board_time:
                        pass
                    else:
                        number = 0
                        start = self.board_time[0]
                        end = self.board_time[-1]
                        clip = openshot.Clip(full_video)
                        clip.Start(start)
                        clip.End(end)
                        self.subvideos.append(clip)
                        self.board_time.clear()
                        number += 1

            num_frames += 1

        video.release()
        cv2.destroyAllWindows()

#-----------------------------------------------------------------------

from .media_file import MediaFile
from itertools import count

import cv2
import openshot

class BoardVideo(MediaFile):
    """
    This class contains the video and analyse the areas for autocut
    """

    def __init__(self, file_path):
        self.file_path = file_path
        self.background = None
        self.accumulate_weight = 0.5
        self.subvideos = list()

    def calculate_accumulated_average(self, frame):
        """
        a method that manage the background for the frame difference
        """
        if self.background is None:
            self.background = frame.copy().astype('float')
        else:
            cv2.accumulateWeighted(
                frame, self.background, self.accumulate_weight
            )

    def segment(self, frame, threshold=50):
        """
        a method that found a movement

        @return: if no movement None else the thresholded frame and the contours
        """

        diff = cv2.absdiff(self.background.astype('uint8'), frame)
        _, thresholded = cv2.threshold(diff, threshold, 255, cv2.THRESH_BINARY)
        contours, _hierarchy = cv2.findContours(
            thresholded.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE
        )
        if len(contours) == 0:
            return None
        else:
            return (thresholded, max(contours, key=cv2.contourArea))

    def area(self, roi_slices, clip_prefix):
        """
        a method that analyse the video frame per frame and save the Clips(visualiser/board) in a list
        """
        video = cv2.VideoCapture(str(self.file_path))
        try:
            background_subtractor = cv2.createBackgroundSubtractorMOG2()
            times = list()
            clip_numbers = count()
            for frame_number in count():
                is_ok, frame = video.read()
                if not is_ok:
                    break

                roi = frame[roi_slices]
                gray = cv2.cvtColor(roi, cv2.COLOR_BGR2GRAY)
                gray = cv2.GaussianBlur(gray, (9, 9), 0)
                foreground_mask = background_subtractor.apply(roi)

                if frame_number == 0:
                    self.calculate_accumulated_average(gray)
                else:
                    if self.segment(gray): #if not self.segment(gray):
                        times.append(video.get(cv2.CAP_PROP_POS_MSEC) / 1000)
                    else:
                        if times:
                            clip = openshot.Clip(
                                '{}{}'.format(clip_prefix, next(clip_numbers))
                            )
                            clip.Start(times[0])
                            clip.End(times[-1])
                            self.subvideos.append(clip)
                            times.clear()
                            #print(self.subvideos)
        finally:
            video.release()
            cv2.destroyAllWindows()

